services:
  loyalty-db:
    image: postgres:15
    container_name: loyalty_db
    hostname: "loyalty-db"
    restart: "unless-stopped"
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - loyalty_db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

loyalty-app:
    build: .
    container_name: "loyalty-app"
    hostname: "loyalty-app"
    restart: "unless-stopped"
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env  # Load environment variables from the .env file
    healthcheck:
      test: ["CMD", "curl", "-f", "http://loyalty-app:5000"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# nginx:
#   image: "nginx:latest"
#   container_name: "nginx"
#   restart: "unless-stopped"
#   depends_on:
#     - loyalty-app
#   ports:
#     - "80:80"
#     - "443:443"
#   volumes:
#     - "./ssl:/etc/nginx/ssl"
#     - "./nginx-conf/nginx.conf:/etc/nginx/nginx.conf"

# watchtower:
#   container_name: "watchtower"
#   image: "containrrr/watchtower"
#   restart: "unless-stopped"
#   ports:
#     - "8080:8080"
#   volumes:
#     - "/var/run/docker.sock:/var/run/docker.sock"
#   environment:
#     - "TZ=Europe/Rome"
#     - "WATCHTOWER_CLEANUP=true"
#     - "WATCHTOWER_LOG_LEVEL=info"
#     - "WATCHTOWER_NO_STARTUP_MESSAGE=true"
#     - "WATCHTOWER_SCHEDULE=0 0 13 * * *"
#     - "WATCHTOWER_HTTP_API_TOKEN=watchtowertoken"
#     - "WATCHTOWER_HTTP_API_METRICS=true"

volumes:
  loyalty_db_data:
    name: "loyalty_db_data"
